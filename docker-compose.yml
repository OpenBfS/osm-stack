version: '3'
services:
  postgres-master:
    build:
      context: bfs-postgres
    image: ${REGISTRY_HOST}bfs/postgis:12-3.0
    restart: always
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_MASTER_PASSWORD}
      - POSTGRES_MASTER=1
      - POSTGRES_MASTER_REPL_PASSWORD=${POSTGRES_MASTER_REPL_PASSWORD}
      - POSTGRES_OSM_PASSWORD=${POSTGRES_MASTER_OSM_PASSWORD}
    ports:
      - 6559:6556
      - 5433:5432
    networks:
      pgnet_osm:
        aliases:
          - postgres
    volumes:
      - postgres-master-dataset:/var/lib/postgresql/data
  postgres-follower:
    build:
      context: bfs-postgres
    image: ${REGISTRY_HOST}bfs/postgis:12-3.0
    restart: always
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_FOLLOWER_PASSWORD}
      - POSTGRES_MASTER_HOST=${MASTER_HOST:-postgres-master}
      - POSTGRES_MASTER_REPL_PASSWORD=${POSTGRES_MASTER_REPL_PASSWORD}
      - POSTGRES_OSM_PASSWORD=${POSTGRES_FOLLOWER_OSM_PASSWORD}
    networks:
      pgnet_osm:
        aliases:
          - postgres
    volumes:
      - postgres-follower-dataset:/var/lib/postgresql/data
  geoserver-master:
    build:
      context: geoserver
    image: ${REGISTRY_HOST}bfs/geoserver:2.17.0
    restart: always
    ports:
      - 8082:8080
    networks:
      - pgnet_osm
    volumes:
      - geoserver-config:/var/local/geoserver/workspaces/
  geoserver-slave:
    build:
      context: geoserver
    image: ${REGISTRY_HOST}bfs/geoserver:2.17.0
    restart: always
    ports:
      - 8082:8080
    networks:
      - pgnet_osm
    environment:
      - GEOSERVER_REPLICA=1
      - MASTER_HOSTNAME=${MASTER_HOST:-localhost}
      - MASTER_PORT=${MASTER_PORT:-2222}
  osm2pgsql:
    build:
      context: osm2pgsql
    image: ${REGISTRY_HOST}bfs/osm2pgsql:1.2.1_1
    restart: always
    environment:
      - POSTGRES_DB=osm
      # Use the public hostname of the host where postgres-master is running if
      # postgres-master runs on a diferent host. Mind that running
      # postgres-master on osm2pgsql on different machines is not recommended
      # for performance reasons.
      - POSTGRES_MASTER_HOST=postgres-master
      - POSTGRES_MASTER_PORT=5432 # switch to 5433 if osm2pgsql is running on a different host than postgres-master
      - POSTGRES_MASTER_USER=osm
      - POSTGRES_MASTER_PASSWORD=${OSM2PGSQL_POSTGRES_MASTER_PASSWORD}
      - PLANET_SOURCE=${OSM2PGSQL_PLANET_SOURCE}
      - PLANET_REPL_URL=${OSM2PGSQL_PLANET_REPL_URL}
      - OSM2PGSQL_CACHE=4000
      - FLAT_NODES=0
    volumes:
      - osmpbf:/osmpbf
    networks:
      - pgnet_osm
  nominatim-postgres-master:
    build:
      context: bfs-postgres
      dockerfile: 'Dockerfile_with_nominatim'
      args:
        NOMINATIM_TARBALL_URL: 'https://nominatim.org/release/Nominatim-3.5.1.tar.bz2'
    image: ${REGISTRY_HOST}bfs/nominatim-postgres-postgis:3.5.1-12-3.0
    restart: always
    environment:
      - NOMINATIM_DIR=/nominatim # currently overwritten by nominatim/run.sh
      - POSTGRES_PASSWORD=${POSTGRES_MASTER_PASSWORD}
      - POSTGRES_MASTER=1
      - PGNET=${PGNET_NOMINATIM}
    ports:
      - 6557:6556
    networks:
      - pgnet_nominatim
    volumes:
      - nominatim-postgres-dataset:/var/lib/postgresql/data
  nominatim-photon-master:
    build:
      context: nominatim
      args:
        NOMINATIM_TARBALL_URL: 'https://nominatim.org/release/Nominatim-3.5.1.tar.bz2'
        PHOTON_ZIP_URL_BASE: 'https://github.com/komoot/photon/archive'
        PHOTON_BRANCH_TAG: '126c5445329bf0c50f131b2cb4b98fb7abef1f37'
    image: ${REGISTRY_HOST}bfs/nominatim-photon-master:3.5.1-0.3.2
    restart: always
    environment:
      - PHOTON_JAR_NAME=/photon/target/photon-0.3.2.jar
      - PLANET_SOURCE=${PHOTON_MASTER_PLANET_SOURCE}
      - OSM2PGSQL_CACHE=4000
      - JAVA_MIN_MEM=200m
      - JAVA_MAX_MEM=32g
      - UPDATE_INTERVAL=86400
      - UPDATE_RECHECK_INTERVAL=900
# It is intended that we do not use the value of the MASTER_HOST environment variable because this would point to the public host name of the master host and make the connection to the database go outside Docker and end up in the wrong database.
      - DB_HOST=nominatim-postgres-master
      - DB_NAME=nominatim
      - DB_PORT=5432
      - DB_USER=nominatim
      - DB_PASSWORD=${PHOTON_MASTER_DB_PASSWORD}
      - PGPASS=/.pgpass
      - FLAT_NODES=0
    volumes:
      - nominatim-osmdata:/osmdata
      - nominatim-flatnodes:/flatnodes
      - photon-data:/data/photon
    networks:
      - pgnet_nominatim
    depends_on:
      - nominatim-postgres-master
  data-master:
    build:
      context: data-master
    image: ${REGISTRY_HOST}bfs/data:1.0
    restart: always
    environment:
      - DATA_MASTER_SSH_PORT=${MASTER_PORT:-2222}
    volumes:
      - photon-data:/data/photon
      - ssh-authorized-keys:/ssh-authorized-keys:ro
      - openrouteservice_graphs:/data/openrouteservice
      - geoserver-config:/data/geoserver
    ports:
      - ${MASTER_PORT:-2222}:22
  photon-slave:
    build:
      context: photon-slave
      args:
        PHOTON_VERSION: '0.3.2'
        PHOTON_ZIP_URL_BASE: 'https://github.com/komoot/photon/archive'
        PHOTON_BRANCH_TAG: '126c5445329bf0c50f131b2cb4b98fb7abef1f37'
    image: ${REGISTRY_HOST}bfs/nominatim-photon-slave:3.5.1-0.3.2
    restart: always
    environment:
      - MASTER_HOSTNAME=${MASTER_HOST:-localhost}
      - MASTER_PORT=${MASTER_PORT:-2222}
      - PHOTON_VERSION=0.3.2
    volumes:
      - photon-data-slave:/photon-data
      - ssh-private-keys:/ssh-private-keys
  openrouteservice-import:
    build:
      context: 'openrouteservice'
      dockerfile: 'Dockerfile_import'
      args:
        APP_CONFIG: 'bfs.config'
        JAVA_OPTS: '-Djava.awt.headless=true -server -XX:TargetSurvivorRatio=75 -XX:SurvivorRatio=64 -XX:MaxTenuringThreshold=3 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:ParallelGCThreads=4 -Xms16g -Xmx16g'
        ORS_ZIP_URL_BASE: 'https://github.com/Nakaner/openrouteservice/archive'
        ORS_BRANCH_TAG: 'matrix-avoid-areas'
        ORS_BRANCH_TAG_IN_ZIP: 'matrix-avoid-areas'
    image: ${REGISTRY_HOST}bfs/openrouteservice-import:matrix-avoid-areas
    restart: always
    environment:
      - JAVA_OPTS="-Djava.awt.headless=true -server -XX:TargetSurvivorRatio=75 -XX:SurvivorRatio=64 -XX:MaxTenuringThreshold=3 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:ParallelGCThreads=4 -Xms8g -Xmx28g"
      - JAR_FILE=/ors-core/openrouteservice/target/ors-jar-with-dependencies.jar
      - PLANET_SOURCE=${ORS_IMPORT_PLANET_SOURCE}
      - POLY_FILE=${ORS_IMPORT_POLY_FILE}
      - UPDATE_INTERVAL=86400
      - UPDATE_RECHECK_INTERVAL=900
    volumes:
      - openrouteservice_osm_file:/data/osm-data
      - openrouteservice_graphs:/data/openrouteservice
      - openrouteservice_elevation_cache:/data/elevation_cache
      - openrouteservice_generation_logs:/var/logs/ors
  openrouteservice-app:
    build:
      context: 'openrouteservice'
      dockerfile: 'Dockerfile_app'
      args:
        ORS_ZIP_URL_BASE: 'https://github.com/Nakaner/openrouteservice/archive'
        ORS_BRANCH_TAG: 'matrix-avoid-areas'
        ORS_BRANCH_TAG_IN_ZIP: 'matrix-avoid-areas'
        APP_CONFIG: 'bfs.config'
        # Die bauzeitliche Umgebungsvariable JAVA_OPTS wird in /usr/local/tomcat/bin/setenv.sh geschrieben und ist somit eine Umgebungsvariable f√ºr Tomcat.
        JAVA_OPTS: '-Djava.awt.headless=true -server -XX:TargetSurvivorRatio=75 -XX:SurvivorRatio=64 -XX:MaxTenuringThreshold=3 -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:ParallelGCThreads=4 -Xms1g -Xmx32g'
    image: ${REGISTRY_HOST}bfs/openrouteservice-app:v6.0.0
    restart: always
    environment:
      - MASTER_HOSTNAME=${MASTER_HOST:-localhost}
      - MASTER_PORT=${MASTER_PORT:-2222}
    volumes:
      - openrouteservice_osm_file:/data/osm-data
      - openrouteservice_graphs_slave:/data/openrouteservice
      - openrouteservice_elevation_cache:/data/elevation_cache
      - openrouteservice_tomcat_logs:/urs/local/tomcat/logs
      - openrouteservice_ors_logs:/urs/local/ors/logs
      - ssh-private-keys:/ssh-private-keys
  vroom:
    build:
      context: 'vroom'
      args:
        VROOM_ZIP_URL_BASE: 'https://github.com/VROOM-Project/vroom/archive'
        VROOM_BRANCH_TAG: 'experiment/avoid-areas'
        VROOM_BRANCH_TAG_IN_ZIP: 'experiment-avoid-areas'
        VROOM_EXPRESS_ZIP_URL_BASE: 'https://github.com/VROOM-Project/vroom-express/archive'
        VROOM_EXPRESS_BRANCH_TAG: 'v0.7.0'
        VROOM_EXPRESS_BRANCH_TAG_IN_ZIP: '0.7.0'
        VROOM_EXPRESS_CONFIG: 'vroom-express-config.yml'
    image: ${REGISTRY_HOST}bfs/vroom:v1.7.0
    restart: always
    volumes:
      - vroom_tmp:/var/lib/vroom-express/tmp
    depends_on:
      - openrouteservice-app
  openrouteservice-proxy:
    build:
      context: openrouteservice
      dockerfile: 'Dockerfile_proxy'
      args:
        ORS_WEB_BRANCH_TAG: 'v0.5.0'
        # The version/branch string in the top level directory of the ZIP archive can differ, e.g. have not "v" at the beginning. Download the archive on your computer first and check what's needed.
        ORS_WEB_BRANCH_TAG_IN_ZIP: '0.5.0'
        TILE_URLBASE_BKG: '/tiles/topplusopen'
        TILE_URLBASE_OSMDE: '/tiles/osmde'
        TILE_URLBASE_BASIC: '/tiles/basicpastel'
        TILE_URLBASE_LABELS: '/tiles/bfs-labels-only'
        GEOCODE_URL_BASE: '/ors/geocode'
    image: ${REGISTRY_HOST}bfs/openrouteservice-proxy:2.4
    restart: always
    ports:
      - 8083:80
    depends_on:
      - openrouteservice-app
  http-proxy:
    build:
      context: http-proxy
      dockerfile: 'Dockerfile'
    image: ${REGISTRY_HOST}bfs/http-proxy:2.4
    restart: always
    ports:
      - 8084:80
    depends_on:
      - photon-slave
  tile-web:
    build:
      context: apache-tirex
    image: ${REGISTRY_HOST}bfs/apache-tirex:2.4.29-0.6.3
    restart: always
    environment:
      - DB_HOST=${SERVICE_HOST:-postgres-follower}
      - DB_PORT=5432
      - DB_NAME=osm
      - DB_USER=osm
      - DB_SUPERUSER=osm
      - DB_PASSWORD=${TILE_WEB_DB_PASSWORD}
      - DB_TABLE_GERMAN_TILED=german_tiled
      - DB_NAME_CONTOURS=contours
      - CONTOURS_URL=${TILE_WEB_CONTOURS_URL}
      - HILLSHADE_URL=${TILE_WEB_HILLSHADE_URL}
      - TMS_TOPPLUSOPEN_URL=${TILE_WEB_TMS_TOPPLUSOPEN_URL}
    ports:
      - 8081:80
      - 6558:6556
    volumes:
      - tiles:/var/lib/tirex/tiles
      - hillshade:/srv/hillshade
    networks:
      - pgnet

  monitoring:
    image: checkmk/check-mk-raw:1.5.0-latest
    restart: always
    environment:
      - CMK_PASSWORD=${CMK_PASSWORD}
    ports:
      - 8090:5000
    ulimits:
      nofile:
        soft: 1024
        hard: 1024
    volumes:
      - ./checkmk-master/sites:/omd/sites
    restart: always
    networks:
      - pgnet


volumes:
  osmpbf:
  nominatim-osmdata:
  nominatim-flatnodes:
  photon-data:
  ssh-authorized-keys:
  ssh-private-keys:
  photon-data-slave:
  tiles:
  hillshade:
  # "style-data" already included in apache-tirex/Dockerfile. DON'T REDEFINE!
  openrouteservice_osm_file:
  openrouteservice_graphs:
  openrouteservice_graphs_slave:
  openrouteservice_elevation_cache:
  openrouteservice_generation_logs:
  openrouteservice_tomcat_logs:
  openrouteservice_ors_logs:
  openrouteservice_webapp:
  vroom_tmp:
  geoserver-config:
  postgres-master-dataset:
  postgres-follower-dataset:
  nominatim-postgres-dataset:

networks:
  pgnet_osm:
    ipam:
      config:
        - subnet: ${PGNET_OSM}
  pgnet_nominatim:
    ipam:
      config:
        - subnet: ${PGNET_NOMINATIM}
