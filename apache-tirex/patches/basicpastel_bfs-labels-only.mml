scale: 1
metatile: 2
name: OpenStreetMap Carto
description: A general-purpose OpenStreetMap mapnik style, in CartoCSS
bounds: &world
  - -180
  - -85.05112877980659
  - 180
  - 85.05112877980659
center:
  - 13
  - 51
  - 12
format: png
interactivity: false
minzoom: 0
maxzoom: 22
srs: "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"

# Various parts to be included later on
_parts:
  # Extents are used for tilemill, and don't actually make it to the generated XML
  extents: &extents
    extent: *world
    srs-name: "900913"
    srs: "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
  extents84: &extents84
    extent: *world
    srs-name: "WGS84"
    srs: "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
  osm2pgsql: &osm2pgsql
    type: "postgis"
    dbname: "${DB_NAME}"
    host: "${DB_HOST}"
    port: "${DB_PORT}"
    user: "${DB_USER}"
    password: "${DB_PASSWORD}"
    key_field: ""
    geometry_field: "way"
    extent: "-20037508,-20037508,20037508,20037508"
  contours: &contours
    type: "postgis"
    dbname: "${DB_NAME_CONTOURS}"
    host: "${DB_HOST}"
    port: "${DB_PORT}"
    user: "${DB_SUPERUSER}"
    password: "${DB_PASSWORD}"
    key_field: ""
    geometry_field: "geom"
    extent: "-20037508,-20037508,20037508,20037508"

Stylesheet:
  - labels_only_style.mss
  - labels_only_roads.mss
  - labels_only_placenames.mss
Layer:
  - id: country-names
    name: country-names
    class: country
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_area/NULLIF(!pixel_width!::real*!pixel_height!::real,0) AS way_pixels,
            CASE
              WHEN g.geom IS NOT NULL THEN name
              ELSE osml10n_get_country_name(tags, chr(10), 'en')
            END AS name
          FROM planet_osm_polygon
          LEFT OUTER JOIN german_tiled AS g ON (way && g.geom AND ST_Intersects(ST_Centroid(way), g.geom))
          WHERE boundary = 'administrative'
            AND admin_level = '2'
            AND name IS NOT NULL
            AND way_area > 100*!pixel_width!::real*!pixel_height!::real
          ORDER BY way_area DESC
        ) AS country_names
    properties:
      minzoom: 2
  - id: capital-names
    name: capital-names
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            CASE
              WHEN g.geom IS NOT NULL THEN name
              ELSE osml10n_get_streetname_from_tags(tags, false, false, ' - ', 'en', way, name)
            END AS name,
            CASE
              WHEN (tags->'population' ~ '^[0-9]{1,8}$') THEN (tags->'population')::INTEGER ELSE 0
            END as population,
            round(ascii(md5(osm_id::text)) / 55) AS dir -- base direction factor on geometry to be consistent across metatiles
          FROM planet_osm_point
          LEFT OUTER JOIN german_tiled AS g ON (way && g.geom AND ST_Intersects(way, g.geom))
          WHERE place IN ('city', 'town', 'village', 'hamlet')
            AND name IS NOT NULL
            AND tags->'capital' = 'yes'
          ORDER BY population DESC
        ) AS capital_names
    properties:
      minzoom: 3
      maxzoom: 15
  - id: state-names
    name: state-names
    class: state
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_area/NULLIF(!pixel_width!::real*!pixel_height!::real,0) AS way_pixels,
            CASE
              WHEN g.geom IS NOT NULL THEN name
              ELSE osml10n_get_streetname_from_tags(tags, false, false, ' - ', 'en', way, name)
            END AS name,
            ref
          FROM planet_osm_polygon
          LEFT OUTER JOIN german_tiled AS g ON (way && g.geom AND ST_Intersects(ST_Centroid(way), g.geom))
          WHERE boundary = 'administrative'
            AND admin_level = '4'
            AND name IS NOT NULL
            AND way_area > 100*!pixel_width!::real*!pixel_height!::real
          ORDER BY way_area DESC
        ) AS state_names
    properties:
      minzoom: 4
  - id: placenames-medium
    name: placenames-medium
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            CASE
              WHEN use_local THEN name
              ELSE osml10n_get_placename_from_tags(tags ,true,false,' - ', 'en', way, name)
            END AS name,
            score,
            CASE
              WHEN (place = 'city') THEN 1
              ELSE 2
            END as category,
            round(ascii(md5(osm_id::text)) / 55) AS dir -- base direction factor on geometry to be consistent across metatiles
          FROM 
            (SELECT
                osm_id,
                way,
                place,
                (g.geom IS NOT NULL) AS use_local,
                tags,
                name,
                (
                  (CASE
                    WHEN (tags->'population' ~ '^[0-9]{1,8}$') THEN (tags->'population')::INTEGER
                    WHEN (place = 'city') THEN 100000
                    WHEN (place = 'town') THEN 1000
                    ELSE 1
                  END)
                  *
                  (CASE
                    WHEN (tags->'capital' = '4') THEN 2
                    ELSE 1
                  END)
                ) AS score
              FROM planet_osm_point
              LEFT OUTER JOIN german_tiled AS g ON (way && g.geom AND ST_Intersects(ST_Centroid(way), g.geom))
              WHERE place IN ('city', 'town')
                AND name IS NOT NULL
                AND (tags->'capital' IS NULL OR tags->'capital' != 'yes')
            ) as p
          ORDER BY score DESC, length(name) DESC, name
        ) AS placenames_medium
    properties:
      minzoom: 4
      maxzoom: 15
  - id: placenames-small
    name: placenames-small
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            place,
            CASE
              WHEN g.geom IS NOT NULL THEN name
              ELSE osml10n_get_placename_from_tags(tags ,true,false,' - ', 'en', way, name)
            END AS name,
            tags
          FROM planet_osm_point
          LEFT OUTER JOIN german_tiled AS g ON (way && g.geom AND ST_Intersects(ST_Centroid(way), g.geom))
          WHERE place IN ('village', 'hamlet')
             AND name IS NOT NULL
             AND (tags->'capital' IS NULL OR tags->'capital' != 'yes')
             OR place IN ('suburb', 'neighbourhood', 'locality', 'isolated_dwelling', 'farm')
             AND name IS NOT NULL
          ORDER BY CASE
              WHEN place = 'suburb' THEN 3
              WHEN place = 'village' THEN 4
              WHEN place = 'hamlet' THEN 5
              WHEN place = 'neighbourhood' THEN 6
              WHEN place = 'locality' THEN 7
              WHEN place = 'isolated_dwelling' THEN 8
              WHEN place = 'farm' THEN 9
            END ASC, length(name) DESC, name
        ) AS placenames_small
    properties:
      minzoom: 12
  - id: stations
    class: stations
    name: stations
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            CASE
              WHEN g.geom IS NOT NULL THEN name
              ELSE osml10n_get_name_without_brackets_from_tags(tags, 'en', way, name)
            END AS name,
            ref,
            railway,
            aerialway,
            CASE railway 
              WHEN 'station' THEN 1 
              WHEN 'subway_entrance' THEN 3
              ELSE 2
            END
              AS prio
          FROM planet_osm_point
          LEFT OUTER JOIN german_tiled AS g ON (way && g.geom AND ST_Intersects(ST_Centroid(way), g.geom))
          WHERE railway IN ('station', 'halt', 'tram_stop', 'subway_entrance')
            OR aerialway = 'station'
          ORDER BY prio
        ) AS stations
    properties:
      minzoom: 12
  - id: stations-poly
    name: stations-poly
    class: stations
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            CASE
              WHEN g.geom IS NOT NULL THEN name
              ELSE osml10n_get_name_without_brackets_from_tags(tags, 'en', way, name)
            END AS name,
            ref,
            railway,
            aerialway
        FROM planet_osm_polygon
        LEFT OUTER JOIN german_tiled AS g ON (way && g.geom AND ST_Intersects(ST_Centroid(way), g.geom))
        WHERE railway IN ('station', 'halt', 'tram_stop')
          OR aerialway = 'station'
        ) AS stations_poly
    properties:
      minzoom: 12
  - id: amenity-points-poly
    name: amenity-points-poly
    class: points
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            COALESCE(
              'aeroway_' || CASE WHEN aeroway IN ('helipad', 'aerodrome') THEN aeroway ELSE NULL END,
              'tourism_' || CASE WHEN tourism IN ('artwork', 'alpine_hut', 'camp_site', 'caravan_site', 'chalet', 'wilderness_hut', 'guest_house',
                                                  'hostel', 'hotel', 'motel', 'information', 'museum', 'picnic_site') THEN tourism ELSE NULL END,
              'amenity_' || CASE WHEN amenity IN ('shelter', 'atm', 'bank', 'bar', 'bicycle_rental', 'bus_station', 'cafe', 
                                                  'car_rental', 'car_wash', 'cinema', 'clinic', 'community_centre', 'fire_station', 'fountain',
                                                  'fuel', 'hospital', 'ice_cream', 'embassy', 'library', 'courthouse', 'townhall', 'parking', 
                                                  'bicycle_parking', 'motorcycle_parking', 'pharmacy', 'doctors', 'dentist', 'place_of_worship', 
                                                  'police', 'post_box', 'post_office', 'pub', 'biergarten', 'recycling', 'restaurant', 'food_court', 
                                                  'fast_food', 'telephone', 'emergency_phone', 'taxi', 'theatre', 'toilets', 'drinking_water', 
                                                  'prison', 'hunting_stand', 'nightclub', 'veterinary', 'social_facility',
                                                  'charging_station') THEN amenity ELSE NULL END,
              'shop_' || CASE WHEN shop IN ('supermarket', 'bag', 'bakery', 'beauty', 'books', 'butcher', 'clothes', 'computer', 
                                            'confectionery', 'fashion', 'convenience', 'department_store', 'doityourself', 'hardware', 'fishmonger', 'florist', 
                                            'garden_centre', 'hairdresser', 'hifi', 'ice_cream', 'car', 'car_repair', 'bicycle', 'mall', 'pet', 
                                            'photo', 'photo_studio', 'photography', 'seafood', 'shoes', 'alcohol', 'gift', 'furniture', 'kiosk', 
                                            'mobile_phone', 'motorcycle', 'musical_instrument', 'newsagent', 'optician', 'jewelry', 'jewellery', 
                                            'electronics', 'chemist', 'toys', 'travel_agency', 'car_parts', 'greengrocer', 'farm', 'stationery', 
                                            'laundry', 'dry_cleaning', 'beverages', 'perfumery', 'cosmetics', 'variety_store', 'wine', 'outdoor', 
                                            'copyshop', 'sports', 'deli', 'tobacco', 'art', 'tea') THEN shop 
                              WHEN shop IN ('no', 'vacant', 'closed', 'disused', 'empty') OR shop IS NULL THEN NULL ELSE 'other' END,
              'leisure_' || CASE WHEN leisure IN ('water_park', 'playground', 'miniature_golf', 'golf_course', 'picnic_table') THEN leisure ELSE NULL END,
              'man_made_' || CASE WHEN man_made IN ('mast', 'water_tower', 'lighthouse', 'windmill', 'obelisk') THEN man_made ELSE NULL END,
              'natural_' || CASE WHEN "natural" IN ('spring') THEN "natural" ELSE NULL END,
              'historic_' || CASE WHEN historic IN ('memorial', 'monument', 'archaeological_site') THEN historic ELSE NULL END,
              'highway_'|| CASE WHEN highway IN ('bus_stop', 'elevator', 'traffic_signals') THEN highway ELSE NULL END,
              'power_' || CASE WHEN power IN ('generator') THEN power ELSE NULL END,
              'tourism_' || CASE WHEN tourism IN ('viewpoint') THEN tourism ELSE NULL END
            ) AS feature,
            access,
            religion,
            tags->'denomination' AS denomination,
            tags->'generator:source' AS "generator:source",
            tags->'power_source' AS power_source,
            way_area/NULLIF(!pixel_width!::real*!pixel_height!::real,0) AS way_pixels
          FROM planet_osm_polygon
          -- The upcoming where clause is needed for performance only, as the CASE statements would end up doing the equivalent filtering
          WHERE aeroway IN ('helipad', 'aerodrome')
            OR tourism IN ('artwork', 'alpine_hut', 'camp_site', 'caravan_site', 'chalet', 'wilderness_hut', 'guest_house', 'hostel',
                           'hotel', 'motel', 'information', 'museum', 'viewpoint', 'picnic_site')
            OR amenity IN ('shelter', 'atm', 'bank', 'bar', 'bicycle_rental', 'bus_station', 'cafe', 
                           'car_rental', 'car_wash', 'cinema', 'clinic', 'community_centre',
                           'fire_station', 'fountain', 'fuel', 'hospital', 'ice_cream', 'embassy', 'library', 'courthouse', 
                           'townhall', 'parking', 'bicycle_parking', 'motorcycle_parking', 'pharmacy', 'doctors', 
                           'dentist', 'place_of_worship', 'police', 'post_box', 'post_office', 'pub', 'biergarten', 
                           'recycling', 'restaurant', 'food_court', 'fast_food', 'telephone', 'emergency_phone', 'taxi', 
                           'theatre', 'toilets', 'drinking_water', 'prison', 'hunting_stand', 'nightclub', 'veterinary',
                           'social_facility', 'charging_station')
            OR shop IS NOT NULL -- skip checking a huge list and use a null check
            OR leisure IN ('water_park', 'playground', 'miniature_golf', 'golf_course', 'picnic_table')
            OR man_made IN ('mast', 'water_tower', 'lighthouse', 'windmill', 'obelisk')
            OR "natural" IN ('spring')
            OR historic IN ('memorial', 'monument', 'archaeological_site')
            OR highway IN ('bus_stop', 'elevator', 'traffic_signals')
            OR (power = 'generator' AND (tags->'generator:source' = 'wind' OR tags->'power_source' = 'wind'))
          ORDER BY way_area desc
        ) AS amenity_points_poly
    properties:
      minzoom: 10
  - id: amenity-points
    name: amenity-points
    class: points
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            COALESCE(
              'aeroway_' || CASE WHEN aeroway IN ('helipad', 'aerodrome') THEN aeroway ELSE NULL END,
              'tourism_' || CASE WHEN tourism IN ('artwork', 'alpine_hut', 'camp_site', 'caravan_site', 'chalet', 'wilderness_hut', 'guest_house', 'hostel',
                                                  'hotel', 'motel', 'information', 'museum', 'picnic_site') THEN tourism ELSE NULL END,
              'amenity_' || CASE WHEN amenity IN ('shelter', 'atm', 'bank', 'bar', 'bicycle_rental', 'bus_station', 'cafe', 
                                                  'car_rental', 'car_wash', 'cinema', 'clinic', 'community_centre', 'fire_station', 'fountain',
                                                  'fuel', 'hospital', 'ice_cream', 'embassy', 'library', 'courthouse', 'townhall', 'parking', 
                                                  'bicycle_parking', 'motorcycle_parking', 'pharmacy', 'doctors', 'dentist', 'place_of_worship', 
                                                  'police', 'post_box', 'post_office', 'pub', 'biergarten', 'recycling', 'restaurant', 'food_court', 
                                                  'fast_food', 'telephone', 'emergency_phone', 'taxi', 'theatre', 'toilets', 'drinking_water', 
                                                  'prison', 'hunting_stand', 'nightclub', 'veterinary', 'social_facility',
                                                  'charging_station') THEN amenity ELSE NULL END,
              'shop_' || CASE WHEN shop IN ('supermarket', 'bag', 'bakery', 'beauty', 'books', 'butcher', 'clothes', 'computer', 'confectionery', 
                                            'fashion', 'convenience', 'department_store', 'doityourself', 'hardware', 'fishmonger', 'florist', 'garden_centre', 
                                            'hairdresser', 'hifi', 'ice_cream', 'car', 'car_repair', 'bicycle', 'mall', 'pet', 'photo', 'photo_studio', 
                                            'photography', 'seafood', 'shoes', 'alcohol', 'gift', 'furniture', 'kiosk', 'mobile_phone', 'motorcycle', 
                                            'musical_instrument', 'newsagent', 'optician', 'jewelry', 'jewellery', 'electronics', 'chemist', 'toys', 
                                            'travel_agency', 'car_parts', 'greengrocer', 'farm', 'stationery', 'laundry', 'dry_cleaning', 'beverages', 
                                            'perfumery', 'cosmetics', 'variety_store', 'wine', 'outdoor', 'copyshop', 'sports', 'deli', 'tobacco', 'art', 'tea') THEN shop 
                              WHEN shop IN ('no', 'vacant', 'closed', 'disused', 'empty') OR shop IS NULL THEN NULL ELSE 'other' END,
              'leisure_' || CASE WHEN leisure IN ('water_park', 'playground', 'miniature_golf', 'golf_course', 'picnic_table', 'slipway',
                                                  'dog_park') THEN leisure ELSE NULL END,
              'man_made_' || CASE WHEN man_made IN ('mast', 'water_tower', 'lighthouse', 'windmill', 'obelisk') THEN man_made ELSE NULL END,
              'natural_' || CASE WHEN "natural" IN ('peak', 'volcano', 'saddle', 'spring', 'cave_entrance') THEN "natural" ELSE NULL END,
              'historic_' || CASE WHEN historic IN ('memorial', 'monument', 'archaeological_site') THEN historic ELSE NULL END,
              'highway_'|| CASE WHEN highway IN ('bus_stop', 'elevator', 'traffic_signals', 'ford') THEN highway ELSE NULL END,
              'power_' || CASE WHEN power IN ('generator') THEN power ELSE NULL END,
              'tourism_' || CASE WHEN tourism IN ('viewpoint') THEN tourism ELSE NULL END,
              'man_made_' || CASE WHEN man_made IN ('cross') THEN man_made ELSE NULL END,
              'historic_' || CASE WHEN historic IN ('wayside_cross') THEN historic ELSE NULL END
            ) AS feature,
            access,
            CASE
              WHEN "natural" IN ('peak', 'volcano', 'saddle') THEN
                CASE
                  WHEN tags->'ele' ~ '^-?\d{1,4}(\.\d+)?$' THEN (tags->'ele')::NUMERIC
                  ELSE NULL
                END
              ELSE NULL
            END AS score,
            religion,
            tags->'denomination' AS denomination,
            tags->'generator:source' AS "generator:source",
            tags->'power_source' AS power_source,
            NULL AS way_pixels
          FROM planet_osm_point
          -- The upcoming where clause is needed for performance only, as the CASE statements would end up doing the equivalent filtering
          WHERE aeroway IN ('helipad', 'aerodrome')
            OR tourism IN ('artwork', 'alpine_hut', 'camp_site', 'caravan_site', 'chalet', 'wilderness_hut', 'guest_house', 'hostel',
                           'hotel', 'motel', 'information', 'museum', 'viewpoint', 'picnic_site')
            OR amenity IN ('shelter', 'atm', 'bank', 'bar', 'bicycle_rental', 'bus_station', 'cafe', 
                           'car_rental',  'car_wash', 'cinema', 'clinic', 'community_centre',
                           'fire_station', 'fountain', 'fuel', 'hospital', 'ice_cream', 'embassy', 'library', 'courthouse', 
                           'townhall', 'parking', 'bicycle_parking', 'motorcycle_parking', 'pharmacy', 'doctors', 
                           'dentist', 'place_of_worship', 'police', 'post_box', 'post_office', 'pub', 'biergarten', 
                           'recycling', 'restaurant', 'food_court', 'fast_food', 'telephone', 'emergency_phone', 
                           'taxi', 'theatre', 'toilets', 'drinking_water', 'prison', 'hunting_stand', 'nightclub', 
                           'veterinary', 'social_facility', 'charging_station')
            OR shop IS NOT NULL -- skip checking a huge list and use a null check
            OR leisure IN ('water_park', 'playground', 'miniature_golf', 'golf_course', 'picnic_table', 'slipway',
                           'dog_park')
            OR man_made IN ('mast', 'water_tower', 'lighthouse', 'windmill', 'cross', 'obelisk')
            OR "natural" IN ('peak', 'volcano', 'saddle', 'spring', 'cave_entrance')
            OR historic IN ('memorial', 'monument', 'archaeological_site', 'wayside_cross')
            OR highway IN ('bus_stop', 'elevator', 'traffic_signals', 'ford')
            OR (power = 'generator' AND (tags->'generator:source' = 'wind' OR tags->'power_source' = 'wind'))
          ORDER BY score DESC NULLS LAST
          ) AS amenity_points
    properties:
      minzoom: 10
  - id: power-towers
    name: power-towers
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_point
          WHERE power = 'tower'
        ) AS power_towers
    properties:
      minzoom: 14
  - id: power-poles
    name: power-poles
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way
          FROM planet_osm_point
          WHERE power = 'pole'
        ) AS power_poles
    properties:
      minzoom: 16
  - id: roads-text-ref-low-zoom
    name: roads-text-ref-low-zoom
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            highway,
            height,
            width,
            refs
          FROM (
            SELECT
                way, highway,
                array_length(refs,1) AS height,
                (SELECT MAX(char_length(ref)) FROM unnest(refs) AS u(ref)) AS width,
                array_to_string(refs, E'\n') AS refs
              FROM (
                SELECT
                    way,
                    highway,
                    string_to_array(ref, ';') AS refs
                FROM planet_osm_roads
                  WHERE highway IN ('motorway', 'trunk', 'primary', 'secondary')
                  AND ref IS NOT NULL
              ) AS p) AS q
          WHERE height <= 4 AND width <= 11) AS roads_text_ref_low_zoom
    properties:
      minzoom: 10
      maxzoom: 12
  - id: junctions
    name: junctions
    geometry: point
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            highway,
            junction,
            ref,
            name
          FROM planet_osm_point
          WHERE highway = 'motorway_junction' OR highway = 'traffic_signals' OR junction = 'yes'
        ) AS junctions
    properties:
      minzoom: 11
  - id: bridge-text
    name: bridge-text
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_area/NULLIF(!pixel_width!::real*!pixel_height!::real,0) AS way_pixels,
            man_made,
            CASE
              WHEN g.geom IS NOT NULL THEN name
              ELSE osml10n_get_streetname_from_tags(tags, true, false, ' - ', 'en', way, name)
            END AS name
          FROM planet_osm_polygon
          LEFT OUTER JOIN german_tiled AS g ON (way && g.geom AND ST_Intersects(ST_Centroid(way), g.geom))
          WHERE man_made = 'bridge'
        ) AS bridge_text
    properties:
      minzoom: 11
  - id: roads-text-ref
    name: roads-text-ref
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            highway,
            height,
            width,
            refs
          FROM (
            SELECT
                way, highway,
                array_length(refs,1) AS height,
                (SELECT MAX(char_length(ref)) FROM unnest(refs) AS u(ref)) AS width,
                array_to_string(refs, E'\n') AS refs
              FROM (
                SELECT
                    way,
                    COALESCE(
                      CASE WHEN highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'unclassified', 'residential') THEN highway ELSE NULL END,
                      CASE WHEN aeroway IN ('runway', 'taxiway') THEN aeroway ELSE NULL END
                    ) AS highway,
                    string_to_array(ref, ';') AS refs
                  FROM planet_osm_line
                    WHERE (highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary', 'unclassified', 'residential') OR aeroway IN ('runway', 'taxiway'))
                      AND ref IS NOT NULL
              ) AS p) AS q
          WHERE height <= 4 AND width <= 11) AS roads_text_ref
    properties:
      minzoom: 13
  - id: roads-area-text-name
    name: roads-area-text-name
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_area/NULLIF(!pixel_width!::real*!pixel_height!::real,0) AS way_pixels,
            highway,
            CASE
              WHEN g.geom IS NOT NULL THEN name
              ELSE osml10n_get_streetname_from_tags(tags, true, false, ' - ', 'en', way, name)
            END AS name
          FROM planet_osm_polygon
          LEFT OUTER JOIN german_tiled AS g ON (way && g.geom AND ST_Intersects(ST_Centroid(way), g.geom))
          WHERE highway IN ('residential', 'unclassified', 'pedestrian', 'service', 'footway', 'cycleway', 'living_street', 'track', 'path', 'platform')
            OR railway IN ('platform')
            AND name IS NOT NULL
        ) AS roads_area_text_name
    properties:
      minzoom: 15
  - id: roads-text-name
    name: roads-text-name
    class: directions
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            CASE WHEN substr(highway, length(highway)-3, 4) = 'link' THEN substr(highway, 0, length(highway)-4) ELSE highway END,
            CASE WHEN (tunnel = 'yes' OR tunnel = 'building_passage' OR covered = 'yes') THEN 'yes' ELSE 'no' END AS tunnel,
            CASE WHEN construction IN ('service', 'footway', 'cycleway', 'bridleway', 'path', 'track') THEN 'yes' ELSE 'no' END AS int_construction_minor,
            CASE
              WHEN g.geom IS NOT NULL THEN name
              ELSE osml10n_get_streetname_from_tags(tags, true, false, ' - ', 'en', way, name)
            END AS name,
            CASE
              WHEN oneway IN ('yes', '-1') THEN oneway
              WHEN junction IN ('roundabout') AND (oneway IS NULL OR NOT oneway IN ('no', 'reversible')) THEN 'yes'
              ELSE NULL
            END AS oneway,
            horse, bicycle
          FROM planet_osm_line
          LEFT OUTER JOIN german_tiled AS g ON (way && g.geom AND ST_Intersects(ST_Centroid(way), g.geom))
          WHERE highway IN ('motorway', 'motorway_link', 'trunk', 'trunk_link', 'primary', 'primary_link', 'secondary', 'secondary_link', 'tertiary', 
                            'tertiary_link', 'residential', 'unclassified', 'road', 'service', 'pedestrian', 'raceway', 'living_street', 'construction')
            AND (name IS NOT NULL
              OR oneway IN ('yes', '-1')
              OR junction IN ('roundabout'))
        ) AS roads_text_name
    properties:
      minzoom: 13
  - id: paths-text-name
    name: paths-text-name
    geometry: linestring
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            highway,
            CASE
              WHEN g.geom IS NOT NULL THEN name
              ELSE osml10n_get_streetname_from_tags(tags, true, false, ' - ', 'en', way, name)
            END AS name
          FROM planet_osm_line
          LEFT OUTER JOIN german_tiled AS g ON (way && g.geom AND ST_Intersects(ST_Centroid(way), g.geom))
          WHERE highway IN ('bridleway', 'footway', 'cycleway', 'path', 'track', 'steps')
            AND name IS NOT NULL
        ) AS paths_text_name
    properties:
      minzoom: 15
  - id: text-poly-low-zoom
    name: text-poly-low-zoom
    class: text-low-zoom
    geometry: polygon
    <<: *extents
    Datasource:
      <<: *osm2pgsql
      table: |-
        (SELECT
            way,
            way_area/NULLIF(!pixel_width!::real*!pixel_height!::real,0) AS way_pixels,
            COALESCE(
              'landuse_' || CASE WHEN landuse IN ('forest', 'military') THEN landuse ELSE NULL END,
              'natural_' || CASE WHEN "natural" IN ('wood', 'glacier', 'sand', 'scree', 'shingle', 'bare_rock') THEN "natural" ELSE NULL END,
              'place_' || CASE WHEN place IN ('island') THEN place ELSE NULL END,
              'boundary_' || CASE WHEN boundary IN ('national_park') THEN boundary ELSE NULL END,
              'leisure_' || CASE WHEN leisure IN ('nature_reserve') THEN leisure ELSE NULL END
            ) AS feature,
            CASE
              WHEN g.geom IS NOT NULL THEN name
              ELSE osml10n_get_name_without_brackets_from_tags(tags, 'en', way, name)
            END AS name,
            CASE WHEN building = 'no' OR building IS NULL THEN 'no' ELSE 'yes' END AS is_building -- always no with the where conditions
          FROM planet_osm_polygon
          LEFT OUTER JOIN german_tiled AS g ON (way && g.geom AND ST_Intersects(ST_Centroid(way), g.geom))
          WHERE (landuse IN ('forest', 'military')
              OR "natural" IN ('wood', 'glacier', 'sand', 'scree', 'shingle', 'bare_rock')
              OR "place" IN ('island')
              OR boundary IN ('national_park')
              OR leisure IN ('nature_reserve'))
            AND building IS NULL
            AND name IS NOT NULL
          ORDER BY way_area DESC
        ) AS text_poly_low_zoom
    properties:
      minzoom: 7
      maxzoom: 9
