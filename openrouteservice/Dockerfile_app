FROM ubuntu:focal

# install xinetd to make it possible to add check_mk to the Docker container
# procps (to be precise: the 'pgrep' binary) is required by the postinst script of check-mk-agent
COPY thirdparty/check-mk-agent_1.5.0p24-1_all.deb /tmp/check-mk-agent.deb
RUN apt-get -qq update && apt-get -qq upgrade -f && apt-get install -qq -y xinetd procps && dpkg -i /tmp/check-mk-agent.deb && rm /tmp/check-mk-agent.deb

# Add custom checkmk checks
COPY checkmk/openrouteservice-osm-data_* checkmk/openrouteservice-graph-update_* /usr/lib/check_mk_agent/local/

RUN chmod a+x /usr/lib/check_mk_agent/local/openrouteservice*

ENV MAVEN_OPTS="-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
ENV MAVEN_CLI_OPTS="--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

ARG APP_CONFIG
ARG JAVA_OPTS
ARG ORS_ZIP_URL_BASE
ARG ORS_BRANCH_TAG
ARG ORS_BRANCH_TAG_IN_ZIP
ARG CATALINA_OPTS
ARG DEBIAN_FRONTEND=noninteractive

# Install required deps
RUN apt-get update && apt-get install -qq -y bash locales maven python3 rsync openssh-client zip jq logrotate wget

# Set the locale
RUN locale-gen en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

# Download Openrouteservice source code and build it
RUN mkdir -p /ors-core/ && \
    wget --quiet -O /ors.zip $ORS_ZIP_URL_BASE/$ORS_BRANCH_TAG.zip && \
    unzip -q -d /ors-core/ /ors.zip && mv /ors-core/openrouteservice-$ORS_BRANCH_TAG_IN_ZIP/openrouteservice/ /ors-core/openrouteservice/ && \
    rm -rf  /ors-core/openrouteservice-$ORS_BRANCH_TAG_IN_ZIP/* && \
    rm /ors.zip

# Copy osm data file, config and cache if provided (ors will download otherwise)
COPY $APP_CONFIG /ors-core/openrouteservice/src/main/resources/app.config

COPY ors.diff ors2.diff ors3.diff ors4.diff /ors-core/openrouteservice/

WORKDIR /ors-core

# set JAVA_HOME
ENV JAVA_HOME /usr/lib/jvm/java-11-openjdk-amd64

# Build Openrouteservice
# Install tomcat
# Add tomcat custom settings if provided
RUN mvn -q -f ./openrouteservice/pom.xml package -DskipTests

RUN cd /ors-core && \
    mkdir /usr/local/tomcat /ors-conf && wget -q https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.39/bin/apache-tomcat-8.5.39.tar.gz -O /tmp/tomcat.tar.gz && \
    cd /tmp && tar xfz tomcat.tar.gz && cp -R /tmp/apache-tomcat-8.5.39/* /usr/local/tomcat/ && \
    mv /ors-core/openrouteservice/target/*.war /usr/local/tomcat/webapps/ors.war && \
    touch /usr/local/tomcat/bin/setenv.sh && echo "CATALINA_OPTS=\"$CATALINA_OPTS\"" >> /usr/local/tomcat/bin/setenv.sh && echo "JAVA_OPTS=\"$JAVA_OPTS\"" >> /usr/local/tomcat/bin/setenv.sh

COPY tomcat.logrotate /etc/logrotate.d/tomcat

COPY run_and_update.py run_tomcat_update_and_xinetd.sh /

RUN chmod 755 /run_tomcat_update_and_xinetd.sh && \
    echo "A SSH key will be copied into a Docker volume mounted at /ssh-private-keys in the next step. It will fail if you have not created this file yet! Please see the subsection \"SSH-Schl√ºssel\" in the chapter \"Routing\" in the setup guide for further details."

# Copy SSH private key
COPY id_root_ed25519 /ssh-private-keys/id_root_ed25519
RUN chmod 0600 /ssh-private-keys/id_root_ed25519

# Create backup of original configuration
RUN cp /ors-core/openrouteservice/src/main/resources/app.config /ors-core/openrouteservice/src/main/resources/app.config.orig && \
    cp /ors-core/openrouteservice/src/main/resources/logs/PRODUCTION_LOGGING.json /ors-core/openrouteservice/src/main/resources/logs/PRODUCTION_LOGGING.json.orig
 
# Create /data
RUN mkdir -p /data/osm-data && mkdir -p /data/openrouteservice

# Copy empty .osm.pbf file to make OpenRouteService start properly
COPY empty.osm.pbf /data/osm-data/osm_file.pbf

# Start the container
EXPOSE 8080
CMD /run_tomcat_update_and_xinetd.sh
